[tox]
envlist = py38
isolated_build = true

[testenv]
skip_install = true
allowlist_externals =
    poetry
    mkdir
passenv =
    SSH_AUTH_SOCK
setenv =
    BUILD_DIR = {toxinidir}/build/{envname}
    PYTEST_OPTS = --junit-prefix="{envname}.pytest" --junitxml={env:BUILD_DIR}/{envname}.pytest.results.xml
commands =
    poetry install -v
    black --check --diff .
    mkdir -p {env:BUILD_DIR}
    pytest --verbose {env:PYTEST_OPTS} {posargs} tests

[testenv:lint]
skip_install = true
allowlist_externals =
    poetry
commands =
    poetry install --quiet --no-root
    black --quiet --fast --check .

[testenv:format]
skip_install = true
allowlist_externals =
    poetry
commands =
    poetry install -v --no-root
    black .

[testenv:docker-{build,push}]
skip_install = true
allowlist_externals =
    docker
passenv =
    SSH_AUTH_SOCK
    RELEASE_VERSION
    DOCKER_REGISTRY
    DOCKER_REGISTRY_CREDS_USER
    DOCKER_REGISTRY_CREDS_PSW
setenv =
    DOCKER_BUILDKIT=1
    DOCKER_PROJECT=datastax/hunter
commands =
    docker buildx build --tag {env:DOCKER_PROJECT}:latest --ssh=default .
    push: docker image tag {env:DOCKER_PROJECT}:latest {env:DOCKER_PROJECT}:{env:RELEASE_VERSION}
    push: docker image tag {env:DOCKER_PROJECT}:{env:RELEASE_VERSION} {env:DOCKER_REGISTRY}/{env:DOCKER_PROJECT}:{env:RELEASE_VERSION}
    push: docker image tag {env:DOCKER_PROJECT}:latest {env:DOCKER_REGISTRY}/{env:DOCKER_PROJECT}:latest
    push: docker login -u {env:DOCKER_REGISTRY_CREDS_USR} -p {env:DOCKER_REGISTRY_CREDS_PSW} {env:DOCKER_REGISTRY}
    push: docker image push {env:DOCKER_REGISTRY}/{env:DOCKER_PROJECT}:{env:RELEASE_VERSION}
    push: docker image push {env:DOCKER_REGISTRY}/{env:DOCKER_PROJECT}:latest
