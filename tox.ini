[tox]
isolated_build = true
basepython = python3.8
ignore_basepython_conflict = true

[tox:jenkins]
envlist = ci

# This is the default test environment; see
# https://tox.readthedocs.io/en/latest/config.html#generating-environments-conditional-settings
# for how we use it for multiple environments; at the moment, these are:
#
# <no env specified>: run noisy linting and tests
# ci: As above, but with settings suitable for jenkins
# lint: run quiet linting and stop
[testenv]
skip_install = true
allowlist_externals =
    poetry
    mkdir
passenv =
    SSH_AUTH_SOCK
setenv =
    BUILD_DIR = {toxinidir}/build/{envname}
    BLACK_OPTS =
    POETRY_OPTS = -v
    PYTEST_OPTS =

    # When running in CI, log test results so that jenkins can publish them
    ci: PYTEST_OPTS = --junit-prefix="{envname}.pytest" --junitxml={env:BUILD_DIR}/{envname}.pytest.results.xml

    # Linting should be quiet and fast
    lint: BLACK_OPTS = --quiet --fast
    lint: POETRY_OPTS = --quiet --no-root
commands =
    poetry install {env:POETRY_OPTS}
    black {env:BLACK_OPTS} --check --diff .
    !lint: mkdir -p {env:BUILD_DIR}
    !lint: pytest --verbose {env:PYTEST_OPTS} {posargs} tests

# The format environment should fix any errors detected by the lint
# environment
[testenv:format]
skip_install = true
allowlist_externals =
    poetry
commands =
    poetry install -v --no-root
    black .

# docker-build and docker-push environments; docker-push requires
# RELEASE_VERSION (x.y.z), DOCKER_REGISTRY, DOCKER_REGISTRY_CREDS_USR and
# DOCKER_REGISTR_CREDS_PSW to be set
[testenv:docker-{build,push}]
skip_install = true
allowlist_externals =
    docker
passenv =
    SSH_AUTH_SOCK
    RELEASE_VERSION
    DOCKER_REGISTRY
    DOCKER_REGISTRY_CREDS_USR
    DOCKER_REGISTRY_CREDS_PSW
setenv =
    DOCKER_BUILDKIT=1
    DOCKER_PROJECT=datastax/hunter
commands =
    docker buildx build --tag {env:DOCKER_PROJECT}:latest --ssh=default .
    push: docker image tag {env:DOCKER_PROJECT}:latest {env:DOCKER_PROJECT}:{env:RELEASE_VERSION}
    push: docker image tag {env:DOCKER_PROJECT}:{env:RELEASE_VERSION} {env:DOCKER_REGISTRY}/{env:DOCKER_PROJECT}:{env:RELEASE_VERSION}
    push: docker image tag {env:DOCKER_PROJECT}:latest {env:DOCKER_REGISTRY}/{env:DOCKER_PROJECT}:latest
    push: docker login -u {env:DOCKER_REGISTRY_CREDS_USR} -p {env:DOCKER_REGISTRY_CREDS_PSW} {env:DOCKER_REGISTRY}
    push: docker image push {env:DOCKER_REGISTRY}/{env:DOCKER_PROJECT}:{env:RELEASE_VERSION}
    push: docker image push {env:DOCKER_REGISTRY}/{env:DOCKER_PROJECT}:latest
